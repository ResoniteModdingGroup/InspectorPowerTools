using FrooxEngine;
using FrooxEngine.UIX;
using HarmonyLib;
using MonkeyLoader.Meta;
using MonkeyLoader;
using MonkeyLoader.Resonite;
using System;
using System.Collections.Generic;
using System.Text;

namespace InspectorPowerTools
{
    [HarmonyPatch(typeof(UserInspector), nameof(UserInspector.OnAttach))]
    [HarmonyPatchCategory(nameof(UserInspectorAsNonHost))]
    internal class UserInspectorAsNonHost : ResoniteMonkey<UserInspectorAsNonHost>
    {
        public override IEnumerable<string> Authors => ["Nytra"];

        public override bool CanBeDisabled => true;

        protected override bool OnEngineReady()
        {
            if (Mod.Loader.Get<Mod>().ById("CommunityBugFixCollection") is not null)
            {
                Logger.Info(() => "Skipping in favor of the CommunityBugFixCollection implementation.");
                return true;
            }

            return base.OnEngineReady();
        }

        private static void Postfix(UserInspector __instance)
        {
            if (!Enabled || __instance.World.IsAuthority)
                return;

            // Wait a bit to see if anything gets generated by the host
            __instance.RunInSeconds(2, () =>
            {
                // Check if any items were generated, just in case this gets fixed in the future
                if (__instance._userListContentRoot.Target.ChildrenCount != 0)
                    return;

                foreach (var user in __instance.World.AllUsers)
                {
                    var slot = __instance._userListContentRoot.Target.AddSlot("User");
                    slot.PersistentSelf = false;
                    slot.AttachComponent<VerticalLayout>().PaddingTop.Value = 4f;
                    slot.AttachComponent<UserInspectorItem>().Setup(user);
                }
            });
        }
    }
}